import streamlit as st
import pandas as pd
import plotly.express as px
import io

st.set_page_config(layout="wide", page_title="Face Recognition Summary Visualizer")

st.title("ðŸ“Š Face Recognition Summary Dashboard")
st.markdown(
    """
    Upload your `final_summary.csv` file generated by the face recognition script
    to visualize the aggregated results for each video folder.
    """
)

# Initialize session state for uploaded file if it doesn't exist
if 'uploaded_file_data' not in st.session_state:
    st.session_state.uploaded_file_data = None

# File uploader widget
uploaded_file = st.file_uploader("Choose a CSV file", type="csv")

# If a new file is uploaded, update the session state
if uploaded_file is not None and uploaded_file != st.session_state.uploaded_file_data:
    st.session_state.uploaded_file_data = uploaded_file
    # To ensure the app re-runs and processes the new file immediately
    st.rerun()

# Use the file from session state for visualization
file_to_process = st.session_state.uploaded_file_data

if file_to_process is not None:
    # Read the uploaded CSV file into a pandas DataFrame
    try:
        # Reset the buffer of the uploaded file to read it again if needed
        file_to_process.seek(0)
        df = pd.read_csv(file_to_process)
        st.success("CSV file uploaded successfully!")

        # Ensure numeric columns are correctly typed, especially for counts
        count_columns = [
            "Gibran Rakabuming Raka", "Prabowo Subianto", "Ganjar Pranabo", "Anies Baswedan", "Unknown Person",
            "male", "female",
            "teenager", "young adult", "middle-aged person", "late adult", "elderly",
            "anger", "contempt", "disgust", "happiness", "fear", "sadness", "surprise", "neutral",
            "original_video_length_sec"
        ]
        for col in count_columns:
            if col in df.columns:
                df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0).astype(int)

        # Convert inference_time_sec to numeric
        if 'inference_time_sec' in df.columns:
            df['inference_time_sec'] = pd.to_numeric(df['inference_time_sec'], errors='coerce')

        # Display the raw data (optional)
        st.subheader("Raw Data Preview")
        st.dataframe(df)

        # Dropdown to select a video folder
        video_folders = df['video_folder'].unique()
        selected_video_folder = st.selectbox(
            "Select a Video Folder to Visualize:",
            video_folders
        )

        # Filter data for the selected video folder
        selected_data = df[df['video_folder'] == selected_video_folder].iloc[0]

        st.markdown("---")
        st.header(f"Insights for: {selected_video_folder}")

        # Display Dominant Attributes, Inference Time, and Original Video Length
        st.subheader("Dominant Attributes & Performance")
        col1, col2, col3, col4, col5, col6 = st.columns(6)

        with col1:
            st.metric("Main Character", selected_data.get("main_character", "N/A"))
        with col2:
            st.metric("Dominant Gender", selected_data.get("dominance_gender", "N/A"))
        with col3:
            st.metric("Dominant Age", selected_data.get("dominance_age", "N/A"))
        with col4:
            st.metric("Dominant Expression", selected_data.get("dominance_expression", "N/A"))
        with col5:
            st.metric("Total Inference Time", f"{selected_data.get('inference_time_sec', 0):.2f} sec")
        with col6:
            st.metric("Video Length", f"{selected_data.get('original_video_length_sec', 0)} sec")

        st.markdown("---")
        st.subheader("Detailed Counts")

        # Define categories for plotting
        identity_categories = ["Gibran Rakabuming Raka", "Prabowo Subianto", "Ganjar Pranabo", "Anies Baswedan",
                               "Unknown Person"]
        gender_categories = ["male", "female"]
        age_categories = ["teenager", "young adult", "middle-aged person", "late adult", "elderly"]
        expression_categories = ["anger", "contempt", "disgust", "happiness", "fear", "sadness", "surprise", "neutral"]


        # Function to create chart data from selected_data
        def create_chart_df(categories, data_row):
            chart_data = []
            for cat in categories:
                chart_data.append({"Category": cat, "Count": data_row.get(cat, 0)})
            return pd.DataFrame(chart_data)


        # Create columns for charts
        chart_col1, chart_col2 = st.columns(2)

        with chart_col1:
            st.markdown("### Identity Counts")
            identity_df = create_chart_df(identity_categories, selected_data)
            fig_identity = px.bar(
                identity_df,
                x="Category",
                y="Count",
                title="Identity Distribution",
                color="Count",
                color_continuous_scale=px.colors.sequential.Viridis  # Changed to Viridis
            )
            fig_identity.update_layout(
                plot_bgcolor='white',
                xaxis=dict(showline=True, linewidth=1, linecolor='black'),
                yaxis=dict(showline=True, linewidth=1, linecolor='black')
            )
            st.plotly_chart(fig_identity, use_container_width=True)

        with chart_col2:
            st.markdown("### Gender Counts")
            gender_df = create_chart_df(gender_categories, selected_data)
            fig_gender = px.bar(
                gender_df,
                x="Category",
                y="Count",
                title="Gender Distribution",
                color="Count",
                color_continuous_scale=px.colors.sequential.Viridis  # Changed to Viridis
            )
            fig_gender.update_layout(
                plot_bgcolor='white',
                xaxis=dict(showline=True, linewidth=1, linecolor='black'),
                yaxis=dict(showline=True, linewidth=1, linecolor='black')
            )
            st.plotly_chart(fig_gender, use_container_width=True)

        chart_col3, chart_col4 = st.columns(2)

        with chart_col3:
            st.markdown("### Age Group Counts")
            age_df = create_chart_df(age_categories, selected_data)
            fig_age = px.bar(
                age_df,
                x="Category",
                y="Count",
                title="Age Group Distribution",
                color="Count",
                color_continuous_scale=px.colors.sequential.Viridis  # Changed to Viridis
            )
            fig_age.update_layout(
                plot_bgcolor='white',
                xaxis=dict(showline=True, linewidth=1, linecolor='black'),
                yaxis=dict(showline=True, linewidth=1, linecolor='black')
            )
            st.plotly_chart(fig_age, use_container_width=True)

        with chart_col4:
            st.markdown("### Expression Counts")
            expression_df = create_chart_df(expression_categories, selected_data)
            fig_expression = px.bar(
                expression_df,
                x="Category",
                y="Count",
                title="Expression Distribution",
                color="Count",
                color_continuous_scale=px.colors.sequential.Viridis  # Changed to Viridis
            )
            fig_expression.update_layout(
                plot_bgcolor='white',
                xaxis=dict(showline=True, linewidth=1, linecolor='black'),
                yaxis=dict(showline=True, linewidth=1, linecolor='black')
            )
            st.plotly_chart(fig_expression, use_container_width=True)

        st.markdown("---")
        # Exit button
        if st.button("Exit Visualization"):
            st.session_state.uploaded_file_data = None
            st.rerun()

    except Exception as e:
        st.error(f"Error reading or processing the CSV file: {e}")
        st.info("Please ensure the uploaded CSV matches the expected format from the face recognition script.")
else:
    st.info("Please upload your `final_summary.csv` file to get started.")

